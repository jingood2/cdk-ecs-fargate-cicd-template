// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Snapshot 1`] = `
Object {
  "Outputs": Object {
    "ALBAlbDnsName2D39C887": Object {
      "Export": Object {
        "Name": "AlbDnsUrl",
      },
      "Value": Object {
        "Fn::GetAtt": Array [
          "ALBdevrockdevALB1FC3A641",
          "DNSName",
        ],
      },
    },
    "VPCVpcId2F75874A": Object {
      "Export": Object {
        "Name": "VpcId",
      },
      "Value": Object {
        "Ref": "devrockdevVpcE0FCCF81",
      },
    },
  },
  "Resources": Object {
    "ALBWAFWebACLAssociation327ACFD0": Object {
      "DependsOn": Array [
        "ALBWAFWebAcl9527ADD0",
      ],
      "Properties": Object {
        "ResourceArn": Object {
          "Ref": "ALBdevrockdevALB1FC3A641",
        },
        "WebACLArn": Object {
          "Fn::GetAtt": Array [
            "ALBWAFWebAcl9527ADD0",
            "Arn",
          ],
        },
      },
      "Type": "AWS::WAFv2::WebACLAssociation",
    },
    "ALBWAFWebAcl9527ADD0": Object {
      "Properties": Object {
        "DefaultAction": Object {
          "Allow": Object {},
        },
        "Name": "devrock-Dev-waf-web-acl",
        "Rules": Array [
          Object {
            "Name": "AWS-AWSManagedRulesCommonRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 1,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesCommonRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesCommonRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesSQLiRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 2,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesSQLiRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesSQLiRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 3,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesKnownBadInputsRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesKnownBadInputsRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesLinuxRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 4,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesLinuxRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesLinuxRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesAmazonIpReputationList",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 5,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesAmazonIpReputationList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAmazonIpReputationList",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesAnonymousIpList",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 6,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesAnonymousIpList",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesAnonymousIpList",
              "SampledRequestsEnabled": true,
            },
          },
          Object {
            "Name": "AWS-AWSManagedRulesBotControlRuleSet",
            "OverrideAction": Object {
              "None": Object {},
            },
            "Priority": 7,
            "Statement": Object {
              "ManagedRuleGroupStatement": Object {
                "Name": "AWSManagedRulesBotControlRuleSet",
                "VendorName": "AWS",
              },
            },
            "VisibilityConfig": Object {
              "CloudWatchMetricsEnabled": true,
              "MetricName": "AWS-AWSManagedRulesBotControlRuleSet",
              "SampledRequestsEnabled": true,
            },
          },
        ],
        "Scope": "REGIONAL",
        "VisibilityConfig": Object {
          "CloudWatchMetricsEnabled": true,
          "MetricName": "devrock-Dev-waf-web-acl",
          "SampledRequestsEnabled": true,
        },
      },
      "Type": "AWS::WAFv2::WebACL",
    },
    "ALBdevrockdevALB1FC3A641": Object {
      "DependsOn": Array [
        "devrockdevVpcpublicSubnet1DefaultRouteF5626F1E",
        "devrockdevVpcpublicSubnet2DefaultRoute176DBDB4",
      ],
      "Properties": Object {
        "LoadBalancerAttributes": Array [
          Object {
            "Key": "deletion_protection.enabled",
            "Value": "false",
          },
        ],
        "Scheme": "internet-facing",
        "SecurityGroups": Array [
          Object {
            "Fn::GetAtt": Array [
              "ALBdevrockdevalbsg2E1574B3",
              "GroupId",
            ],
          },
        ],
        "Subnets": Array [
          Object {
            "Ref": "devrockdevVpcpublicSubnet1SubnetD5F9935D",
          },
          Object {
            "Ref": "devrockdevVpcpublicSubnet2Subnet7AA112DD",
          },
        ],
        "Type": "application",
      },
      "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
    },
    "ALBdevrockdevALBRedirect80To44370CA9602": Object {
      "Properties": Object {
        "DefaultActions": Array [
          Object {
            "RedirectConfig": Object {
              "Port": "443",
              "Protocol": "HTTPS",
              "StatusCode": "HTTP_301",
            },
            "Type": "redirect",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ALBdevrockdevALB1FC3A641",
        },
        "Port": 80,
        "Protocol": "HTTP",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ALBdevrockdevALBhttps591F00AD": Object {
      "Properties": Object {
        "Certificates": Array [
          Object {
            "CertificateArn": "arn:aws:acm:ap-northeast-2:074732449166:certificate/8fddc4d7-35b4-41fc-9072-b6074698920f",
          },
        ],
        "DefaultActions": Array [
          Object {
            "FixedResponseConfig": Object {
              "ContentType": "text/plain",
              "MessageBody": "Page not found",
              "StatusCode": "404",
            },
            "Type": "fixed-response",
          },
        ],
        "LoadBalancerArn": Object {
          "Ref": "ALBdevrockdevALB1FC3A641",
        },
        "Port": 443,
        "Protocol": "HTTPS",
      },
      "Type": "AWS::ElasticLoadBalancingV2::Listener",
    },
    "ALBdevrockdevALBhttpsbackendTargetgroupGroup68A8A54A": Object {
      "Properties": Object {
        "HealthCheckIntervalSeconds": 60,
        "HealthCheckPath": "/health",
        "Name": "backend-targetgroup",
        "Port": 80,
        "Protocol": "HTTP",
        "TargetGroupAttributes": Array [
          Object {
            "Key": "stickiness.enabled",
            "Value": "false",
          },
        ],
        "TargetType": "ip",
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
    },
    "ALBdevrockdevALBhttpsbackendTargetgroupRule23E38981": Object {
      "Properties": Object {
        "Actions": Array [
          Object {
            "TargetGroupArn": Object {
              "Ref": "ALBdevrockdevALBhttpsbackendTargetgroupGroup68A8A54A",
            },
            "Type": "forward",
          },
        ],
        "Conditions": Array [
          Object {
            "Field": "path-pattern",
            "PathPatternConfig": Object {
              "Values": Array [
                "/v1/*",
              ],
            },
          },
        ],
        "ListenerArn": Object {
          "Ref": "ALBdevrockdevALBhttps591F00AD",
        },
        "Priority": 10,
      },
      "Type": "AWS::ElasticLoadBalancingV2::ListenerRule",
    },
    "ALBdevrockdevalbsg2E1574B3": Object {
      "Properties": Object {
        "GroupDescription": "devrock dev ALB Security Group",
        "GroupName": "devrock-dev-alb-sg",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 443",
            "FromPort": 443,
            "IpProtocol": "tcp",
            "ToPort": 443,
          },
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow from anyone on port 80",
            "FromPort": 80,
            "IpProtocol": "tcp",
            "ToPort": 80,
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "CLUSTERCDDEBBE4": Object {
      "Properties": Object {
        "ClusterName": "devrock-ecs-cluster",
      },
      "Type": "AWS::ECS::Cluster",
    },
    "EcsTaskExecutionRoleC0B6A84D": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "RoleName": "EcsTaskExecutionRole",
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA": Object {
      "Properties": Object {
        "Artifacts": Object {
          "Type": "CODEPIPELINE",
        },
        "Cache": Object {
          "Modes": Array [
            "LOCAL_DOCKER_LAYER_CACHE",
          ],
          "Type": "LOCAL",
        },
        "EncryptionKey": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
            "Arn",
          ],
        },
        "Environment": Object {
          "ComputeType": "BUILD_GENERAL1_SMALL",
          "EnvironmentVariables": Array [
            Object {
              "Name": "REPOSITORY_URI",
              "Type": "PLAINTEXT",
              "Value": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    Object {
                      "Fn::Select": Array [
                        4,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Fn::GetAtt": Array [
                                "backendEcsFargateWithCicdbackendecrrepo04ABABD5",
                                "Arn",
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    ".dkr.ecr.",
                    Object {
                      "Fn::Select": Array [
                        3,
                        Object {
                          "Fn::Split": Array [
                            ":",
                            Object {
                              "Fn::GetAtt": Array [
                                "backendEcsFargateWithCicdbackendecrrepo04ABABD5",
                                "Arn",
                              ],
                            },
                          ],
                        },
                      ],
                    },
                    ".",
                    Object {
                      "Ref": "AWS::URLSuffix",
                    },
                    "/",
                    Object {
                      "Ref": "backendEcsFargateWithCicdbackendecrrepo04ABABD5",
                    },
                  ],
                ],
              },
            },
            Object {
              "Name": "CONTAINER_NAME",
              "Type": "PLAINTEXT",
              "Value": "backend",
            },
          ],
          "Image": "aws/codebuild/standard:4.0",
          "ImagePullCredentialsType": "CODEBUILD",
          "PrivilegedMode": true,
          "Type": "LINUX_CONTAINER",
        },
        "ServiceRole": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendCodeBuildPlojectRole185091B8",
            "Arn",
          ],
        },
        "Source": Object {
          "BuildSpec": "{
  \\"version\\": \\"0.2\\",
  \\"phases\\": {
    \\"pre_build\\": {
      \\"commands\\": [
        \\"aws --version\\",
        \\"$(aws ecr get-login --region \${AWS_DEFAULT_REGION} --no-include-email |  sed 's|https://||')\\",
        \\"COMMIT_HASH=$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | cut -c 1-7)\\",
        \\"IMAGE_TAG=\${COMMIT_HASH:=latest}\\",
        \\"echo $IMAGE_TAG\\"
      ]
    },
    \\"build\\": {
      \\"commands\\": [
        \\"chmod +x gradlew\\",
        \\"./gradlew clean build\\",
        \\"docker build -t $REPOSITORY_URI:latest .\\",
        \\"docker tag $REPOSITORY_URI:latest $REPOSITORY_URI:$IMAGE_TAG\\"
      ]
    },
    \\"post_build\\": {
      \\"commands\\": [
        \\"echo Build completed on \`date\`\\",
        \\"echo Pushing the Docker images...\\",
        \\"docker push $REPOSITORY_URI:latest\\",
        \\"docker push $REPOSITORY_URI:$IMAGE_TAG\\",
        \\"echo Writing image definitions file...\\",
        \\"printf \\\\\\"[{\\\\\\\\\\\\\\"name\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\${CONTAINER_NAME}\\\\\\\\\\\\\\",\\\\\\\\\\\\\\"imageUri\\\\\\\\\\\\\\":\\\\\\\\\\\\\\"\${REPOSITORY_URI}:latest\\\\\\\\\\\\\\"}]\\\\\\" > imagedefinitions.json\\"
      ]
    }
  },
  \\"artifacts\\": {
    \\"files\\": [
      \\"imagedefinitions.json\\"
    ]
  }
}",
          "Type": "CODEPIPELINE",
        },
      },
      "Type": "AWS::CodeBuild::Project",
    },
    "backendEcsFargateWithCicdbackendCodeBuildPlojectRole185091B8": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codebuild.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendCodeBuildPlojectRoleDefaultPolicy34C36B6B": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "logs:CreateLogGroup",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:ap-northeast-2:074732449166:log-group:/aws/codebuild/",
                      Object {
                        "Ref": "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA",
                      },
                    ],
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":logs:ap-northeast-2:074732449166:log-group:/aws/codebuild/",
                      Object {
                        "Ref": "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA",
                      },
                      ":*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "codebuild:CreateReportGroup",
                "codebuild:CreateReport",
                "codebuild:UpdateReport",
                "codebuild:BatchPutTestCases",
                "codebuild:BatchPutCodeCoverages",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":codebuild:ap-northeast-2:074732449166:report-group/",
                    Object {
                      "Ref": "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA",
                    },
                    "-*",
                  ],
                ],
              },
            },
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendecrrepo04ABABD5",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecr:PutImage",
                "ecr:InitiateLayerUpload",
                "ecr:UploadLayerPart",
                "ecr:CompleteLayerUpload",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendecrrepo04ABABD5",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "backendEcsFargateWithCicdbackendCodeBuildPlojectRoleDefaultPolicy34C36B6B",
        "Roles": Array [
          Object {
            "Ref": "backendEcsFargateWithCicdbackendCodeBuildPlojectRole185091B8",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipeline41D87E94": Object {
      "DependsOn": Array [
        "backendEcsFargateWithCicdbackendbuildCodePipelineRoleDefaultPolicyD574E0E7",
        "backendEcsFargateWithCicdbackendbuildCodePipelineRoleEA1D01C6",
      ],
      "Properties": Object {
        "ArtifactStore": Object {
          "EncryptionKey": Object {
            "Id": Object {
              "Fn::GetAtt": Array [
                "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                "Arn",
              ],
            },
            "Type": "KMS",
          },
          "Location": Object {
            "Ref": "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
          },
          "Type": "S3",
        },
        "Name": "backend-ci-ecr-pipeline",
        "RoleArn": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendbuildCodePipelineRoleEA1D01C6",
            "Arn",
          ],
        },
        "Stages": Array [
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Source",
                  "Owner": "ThirdParty",
                  "Provider": "GitHub",
                  "Version": "1",
                },
                "Configuration": Object {
                  "Branch": "feature/odigage-admin",
                  "OAuthToken": "{{resolve:secretsmanager:devrock/github/odigage:SecretString:::}}",
                  "Owner": "devrock-svc",
                  "PollForSourceChanges": false,
                  "Repo": "videoend-back",
                },
                "Name": "Github_Source",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Artifact_Source_Github_Source",
                  },
                ],
                "RunOrder": 1,
              },
            ],
            "Name": "Source",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Build",
                  "Owner": "AWS",
                  "Provider": "CodeBuild",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ProjectName": Object {
                    "Ref": "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA",
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Artifact_Source_Github_Source",
                  },
                ],
                "Name": "Build_DockerImage_ECR",
                "OutputArtifacts": Array [
                  Object {
                    "Name": "Artifact_Build_Build_DockerImage_ECR",
                  },
                ],
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRole25C55326",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Build",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Approval",
                  "Owner": "AWS",
                  "Provider": "Manual",
                  "Version": "1",
                },
                "Name": "Approve",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineApprovalApproveCodePipelineActionRole9DD16117",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "Approval",
          },
          Object {
            "Actions": Array [
              Object {
                "ActionTypeId": Object {
                  "Category": "Deploy",
                  "Owner": "AWS",
                  "Provider": "ECS",
                  "Version": "1",
                },
                "Configuration": Object {
                  "ClusterName": Object {
                    "Ref": "CLUSTERCDDEBBE4",
                  },
                  "ServiceName": Object {
                    "Fn::GetAtt": Array [
                      "backendEcsFargateWithCicdbackendecsserviceService0583A20E",
                      "Name",
                    ],
                  },
                },
                "InputArtifacts": Array [
                  Object {
                    "Name": "Artifact_Build_Build_DockerImage_ECR",
                  },
                ],
                "Name": "DeployAction",
                "RoleArn": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRole62CFE761",
                    "Arn",
                  ],
                },
                "RunOrder": 1,
              },
            ],
            "Name": "DeploytoECS",
          },
        ],
      },
      "Type": "AWS::CodePipeline::Pipeline",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineApprovalApproveCodePipelineActionRole9DD16117": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::074732449166:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "BucketEncryption": Object {
          "ServerSideEncryptionConfiguration": Array [
            Object {
              "ServerSideEncryptionByDefault": Object {
                "KMSMasterKeyID": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                    "Arn",
                  ],
                },
                "SSEAlgorithm": "aws:kms",
              },
            },
          ],
        },
        "PublicAccessBlockConfiguration": Object {
          "BlockPublicAcls": true,
          "BlockPublicPolicy": true,
          "IgnorePublicAcls": true,
          "RestrictPublicBuckets": true,
        },
      },
      "Type": "AWS::S3::Bucket",
      "UpdateReplacePolicy": "Retain",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyAliasA1289BB8": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "AliasName": "alias/codepipeline-teststackbackendecsfargatewithcicdbackendbuildcodepipeline51016094",
        "TargetKeyId": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
            "Arn",
          ],
        },
      },
      "Type": "AWS::KMS::Alias",
      "UpdateReplacePolicy": "Delete",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C": Object {
      "DeletionPolicy": "Delete",
      "Properties": Object {
        "KeyPolicy": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "kms:Create*",
                "kms:Describe*",
                "kms:Enable*",
                "kms:List*",
                "kms:Put*",
                "kms:Update*",
                "kms:Revoke*",
                "kms:Disable*",
                "kms:Get*",
                "kms:Delete*",
                "kms:ScheduleKeyDeletion",
                "kms:CancelKeyDeletion",
                "kms:GenerateDataKey",
                "kms:TagResource",
                "kms:UntagResource",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::074732449166:root",
                    ],
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineRoleEA1D01C6",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendCodeBuildPlojectRole185091B8",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendCodeBuildPlojectRole185091B8",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRole62CFE761",
                    "Arn",
                  ],
                },
              },
              "Resource": "*",
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::KMS::Key",
      "UpdateReplacePolicy": "Delete",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRole25C55326": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::074732449166:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRoleDefaultPolicyC8CD7C81": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "codebuild:BatchGetBuilds",
                "codebuild:StartBuild",
                "codebuild:StopBuild",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendCodeBuildPloject3FD54BBA",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRoleDefaultPolicyC8CD7C81",
        "Roles": Array [
          Object {
            "Ref": "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRole25C55326",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRole62CFE761": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "AWS": Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      "arn:",
                      Object {
                        "Ref": "AWS::Partition",
                      },
                      ":iam::074732449166:root",
                    ],
                  ],
                },
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRoleDefaultPolicy65B38173": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecs:DescribeServices",
                "ecs:DescribeTaskDefinition",
                "ecs:DescribeTasks",
                "ecs:ListTasks",
                "ecs:RegisterTaskDefinition",
                "ecs:UpdateService",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": "iam:PassRole",
              "Condition": Object {
                "StringEqualsIfExists": Object {
                  "iam:PassedToService": Array [
                    "ec2.amazonaws.com",
                    "ecs-tasks.amazonaws.com",
                  ],
                },
              },
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRoleDefaultPolicy65B38173",
        "Roles": Array [
          Object {
            "Ref": "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRole62CFE761",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineRoleDefaultPolicyD574E0E7": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "s3:GetObject*",
                "s3:GetBucket*",
                "s3:List*",
                "s3:DeleteObject*",
                "s3:PutObject*",
                "s3:Abort*",
              ],
              "Effect": "Allow",
              "Resource": Array [
                Object {
                  "Fn::GetAtt": Array [
                    "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                    "Arn",
                  ],
                },
                Object {
                  "Fn::Join": Array [
                    "",
                    Array [
                      Object {
                        "Fn::GetAtt": Array [
                          "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucket50AAFE37",
                          "Arn",
                        ],
                      },
                      "/*",
                    ],
                  ],
                },
              ],
            },
            Object {
              "Action": Array [
                "kms:Decrypt",
                "kms:DescribeKey",
                "kms:Encrypt",
                "kms:ReEncrypt*",
                "kms:GenerateDataKey*",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineArtifactsBucketEncryptionKeyFF67CC2C",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineBuildBuildDockerImageECRCodePipelineActionRole25C55326",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineApprovalApproveCodePipelineActionRole9DD16117",
                  "Arn",
                ],
              },
            },
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendbuildCodePipelineDeploytoECSDeployActionCodePipelineActionRole62CFE761",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "backendEcsFargateWithCicdbackendbuildCodePipelineRoleDefaultPolicyD574E0E7",
        "Roles": Array [
          Object {
            "Ref": "backendEcsFargateWithCicdbackendbuildCodePipelineRoleEA1D01C6",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineRoleEA1D01C6": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "codepipeline.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendbuildCodePipelineSourceGithubSourceWebhookResource375D542C": Object {
      "Properties": Object {
        "Authentication": "GITHUB_HMAC",
        "AuthenticationConfiguration": Object {
          "SecretToken": "{{resolve:secretsmanager:devrock/github/odigage:SecretString:::}}",
        },
        "Filters": Array [
          Object {
            "JsonPath": "$.ref",
            "MatchEquals": "refs/heads/{Branch}",
          },
        ],
        "RegisterWithThirdParty": true,
        "TargetAction": "Github_Source",
        "TargetPipeline": Object {
          "Ref": "backendEcsFargateWithCicdbackendbuildCodePipeline41D87E94",
        },
        "TargetPipelineVersion": 1,
      },
      "Type": "AWS::CodePipeline::Webhook",
    },
    "backendEcsFargateWithCicdbackendecrrepo04ABABD5": Object {
      "DeletionPolicy": "Retain",
      "Properties": Object {
        "RepositoryName": "backend-ecr-repo",
      },
      "Type": "AWS::ECR::Repository",
      "UpdateReplacePolicy": "Retain",
    },
    "backendEcsFargateWithCicdbackendecsserviceSecurityGroupAFD4EC29": Object {
      "Properties": Object {
        "GroupDescription": "testStack/backend-EcsFargateWithCicd/backend-ecs-service/SecurityGroup",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "backendEcsFargateWithCicdbackendecsserviceSecurityGroupfromtestStackALBdevrockdevalbsg46DF81F180905C469098": Object {
      "Properties": Object {
        "Description": "Load balancer to target",
        "FromPort": 8090,
        "GroupId": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendecsserviceSecurityGroupAFD4EC29",
            "GroupId",
          ],
        },
        "IpProtocol": "tcp",
        "SourceSecurityGroupId": Object {
          "Fn::GetAtt": Array [
            "ALBdevrockdevalbsg2E1574B3",
            "GroupId",
          ],
        },
        "ToPort": 8090,
      },
      "Type": "AWS::EC2::SecurityGroupIngress",
    },
    "backendEcsFargateWithCicdbackendecsserviceService0583A20E": Object {
      "DependsOn": Array [
        "ALBdevrockdevALBhttpsbackendTargetgroupRule23E38981",
      ],
      "Properties": Object {
        "Cluster": Object {
          "Ref": "CLUSTERCDDEBBE4",
        },
        "DeploymentConfiguration": Object {
          "MaximumPercent": 200,
          "MinimumHealthyPercent": 50,
        },
        "DesiredCount": 2,
        "EnableECSManagedTags": false,
        "HealthCheckGracePeriodSeconds": 60,
        "LaunchType": "FARGATE",
        "LoadBalancers": Array [
          Object {
            "ContainerName": "backend",
            "ContainerPort": 8090,
            "TargetGroupArn": Object {
              "Ref": "ALBdevrockdevALBhttpsbackendTargetgroupGroup68A8A54A",
            },
          },
        ],
        "NetworkConfiguration": Object {
          "AwsvpcConfiguration": Object {
            "AssignPublicIp": "DISABLED",
            "SecurityGroups": Array [
              Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendecsserviceSecurityGroupAFD4EC29",
                  "GroupId",
                ],
              },
            ],
            "Subnets": Array [
              Object {
                "Ref": "devrockdevVpcprivateSubnet1Subnet8A550869",
              },
              Object {
                "Ref": "devrockdevVpcprivateSubnet2Subnet0E13231B",
              },
            ],
          },
        },
        "TaskDefinition": Object {
          "Ref": "backendEcsFargateWithCicdbackendfargatetaskdef24EBB49E",
        },
      },
      "Type": "AWS::ECS::Service",
    },
    "backendEcsFargateWithCicdbackendecsserviceTaskCountTargetCPUUtilizationScaleInOut4E3782A7": Object {
      "Properties": Object {
        "PolicyName": "testStackbackendEcsFargateWithCicdbackendecsserviceTaskCountTargetCPUUtilizationScaleInOut3866B7E6",
        "PolicyType": "TargetTrackingScaling",
        "ScalingTargetId": Object {
          "Ref": "backendEcsFargateWithCicdbackendecsserviceTaskCountTargetE9C9C7CA",
        },
        "TargetTrackingScalingPolicyConfiguration": Object {
          "PredefinedMetricSpecification": Object {
            "PredefinedMetricType": "ECSServiceAverageCPUUtilization",
          },
          "ScaleInCooldown": 360,
          "ScaleOutCooldown": 60,
          "TargetValue": 20,
        },
      },
      "Type": "AWS::ApplicationAutoScaling::ScalingPolicy",
    },
    "backendEcsFargateWithCicdbackendecsserviceTaskCountTargetE9C9C7CA": Object {
      "Properties": Object {
        "MaxCapacity": 4,
        "MinCapacity": 2,
        "ResourceId": Object {
          "Fn::Join": Array [
            "",
            Array [
              "service/",
              Object {
                "Ref": "CLUSTERCDDEBBE4",
              },
              "/",
              Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendecsserviceService0583A20E",
                  "Name",
                ],
              },
            ],
          ],
        },
        "RoleARN": Object {
          "Fn::Join": Array [
            "",
            Array [
              "arn:",
              Object {
                "Ref": "AWS::Partition",
              },
              ":iam::074732449166:role/aws-service-role/ecs.application-autoscaling.amazonaws.com/AWSServiceRoleForApplicationAutoScaling_ECSService",
            ],
          ],
        },
        "ScalableDimension": "ecs:service:DesiredCount",
        "ServiceNamespace": "ecs",
      },
      "Type": "AWS::ApplicationAutoScaling::ScalableTarget",
    },
    "backendEcsFargateWithCicdbackendfargatetaskdef24EBB49E": Object {
      "Properties": Object {
        "ContainerDefinitions": Array [
          Object {
            "Cpu": 1024,
            "EnvironmentFiles": Array [],
            "Essential": true,
            "Image": Object {
              "Fn::Join": Array [
                "",
                Array [
                  "074732449166.dkr.ecr.ap-northeast-2.",
                  Object {
                    "Ref": "AWS::URLSuffix",
                  },
                  "/aws-cdk/assets:fdb22e68c925d7aa8f08aac0a41a165e6dc0a7df19620c5e400702223b65b2b1",
                ],
              ],
            },
            "LogConfiguration": Object {
              "LogDriver": "awslogs",
              "Options": Object {
                "awslogs-group": Object {
                  "Ref": "backendEcsFargateWithCicdbackendfargatetaskdefbackendContainerLogGroup73CAED16",
                },
                "awslogs-region": "ap-northeast-2",
                "awslogs-stream-prefix": "ecs-logs",
              },
            },
            "Memory": 2048,
            "Name": "backend",
            "PortMappings": Array [
              Object {
                "ContainerPort": 8090,
                "Protocol": "tcp",
              },
            ],
            "Secrets": Array [],
          },
        ],
        "Cpu": "1024",
        "ExecutionRoleArn": Object {
          "Fn::GetAtt": Array [
            "backendEcsFargateWithCicdbackendfargatetaskdefExecutionRole67FC02DA",
            "Arn",
          ],
        },
        "Family": "testStackbackendEcsFargateWithCicdbackendfargatetaskdef705545C5",
        "Memory": "2048",
        "NetworkMode": "awsvpc",
        "RequiresCompatibilities": Array [
          "FARGATE",
        ],
        "TaskRoleArn": Object {
          "Fn::GetAtt": Array [
            "EcsTaskExecutionRoleC0B6A84D",
            "Arn",
          ],
        },
      },
      "Type": "AWS::ECS::TaskDefinition",
    },
    "backendEcsFargateWithCicdbackendfargatetaskdefExecutionRole67FC02DA": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ecs-tasks.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
      },
      "Type": "AWS::IAM::Role",
    },
    "backendEcsFargateWithCicdbackendfargatetaskdefExecutionRoleDefaultPolicy69348501": Object {
      "Properties": Object {
        "PolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": Array [
                "ecr:GetAuthorizationToken",
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "ecr:BatchCheckLayerAvailability",
                "ecr:GetDownloadUrlForLayer",
                "ecr:BatchGetImage",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::Join": Array [
                  "",
                  Array [
                    "arn:",
                    Object {
                      "Ref": "AWS::Partition",
                    },
                    ":ecr:ap-northeast-2:074732449166:repository/aws-cdk/assets",
                  ],
                ],
              },
            },
            Object {
              "Action": "ecr:GetAuthorizationToken",
              "Effect": "Allow",
              "Resource": "*",
            },
            Object {
              "Action": Array [
                "logs:CreateLogStream",
                "logs:PutLogEvents",
              ],
              "Effect": "Allow",
              "Resource": Object {
                "Fn::GetAtt": Array [
                  "backendEcsFargateWithCicdbackendfargatetaskdefbackendContainerLogGroup73CAED16",
                  "Arn",
                ],
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "PolicyName": "backendEcsFargateWithCicdbackendfargatetaskdefExecutionRoleDefaultPolicy69348501",
        "Roles": Array [
          Object {
            "Ref": "backendEcsFargateWithCicdbackendfargatetaskdefExecutionRole67FC02DA",
          },
        ],
      },
      "Type": "AWS::IAM::Policy",
    },
    "backendEcsFargateWithCicdbackendfargatetaskdefbackendContainerLogGroup73CAED16": Object {
      "DeletionPolicy": "Retain",
      "Type": "AWS::Logs::LogGroup",
      "UpdateReplacePolicy": "Retain",
    },
    "devrockdevVpcE0FCCF81": Object {
      "Properties": Object {
        "CidrBlock": "10.0.0.0/16",
        "EnableDnsHostnames": true,
        "EnableDnsSupport": true,
        "InstanceTenancy": "default",
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::VPC",
    },
    "devrockdevVpcIGW15E80D98": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc",
          },
        ],
      },
      "Type": "AWS::EC2::InternetGateway",
    },
    "devrockdevVpcNatRole0844BD2B": Object {
      "Properties": Object {
        "AssumeRolePolicyDocument": Object {
          "Statement": Array [
            Object {
              "Action": "sts:AssumeRole",
              "Effect": "Allow",
              "Principal": Object {
                "Service": "ec2.amazonaws.com",
              },
            },
          ],
          "Version": "2012-10-17",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc",
          },
        ],
      },
      "Type": "AWS::IAM::Role",
    },
    "devrockdevVpcNatSecurityGroupC7C190C8": Object {
      "Properties": Object {
        "GroupDescription": "Security Group for NAT instances",
        "SecurityGroupEgress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "Allow all outbound traffic by default",
            "IpProtocol": "-1",
          },
        ],
        "SecurityGroupIngress": Array [
          Object {
            "CidrIp": "0.0.0.0/0",
            "Description": "from 0.0.0.0/0:ALL TRAFFIC",
            "IpProtocol": "-1",
          },
        ],
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::SecurityGroup",
    },
    "devrockdevVpcVPCGW5AE47AFA": Object {
      "Properties": Object {
        "InternetGatewayId": Object {
          "Ref": "devrockdevVpcIGW15E80D98",
        },
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::VPCGatewayAttachment",
    },
    "devrockdevVpcdbSubnet1RouteTable4B4F02A7": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/dbSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcdbSubnet1RouteTableAssociation3FFCD75A": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcdbSubnet1RouteTable4B4F02A7",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcdbSubnet1Subnet57A781C1",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcdbSubnet1Subnet57A781C1": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.24.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "db",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/dbSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "devrockdevVpcdbSubnet2RouteTable26D5ACB8": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/dbSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcdbSubnet2RouteTableAssociation996A9CC7": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcdbSubnet2RouteTable26D5ACB8",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcdbSubnet2SubnetBA60DE32",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcdbSubnet2SubnetBA60DE32": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.25.0/24",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "db",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Isolated",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/dbSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "devrockdevVpcprivateSubnet1DefaultRoute934E90EB": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": Object {
          "Ref": "devrockdevVpcpublicSubnet1NatInstance29B1A7CB",
        },
        "RouteTableId": Object {
          "Ref": "devrockdevVpcprivateSubnet1RouteTable2CF6EB3B",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "devrockdevVpcprivateSubnet1RouteTable2CF6EB3B": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/privateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcprivateSubnet1RouteTableAssociation070FB427": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcprivateSubnet1RouteTable2CF6EB3B",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcprivateSubnet1Subnet8A550869",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcprivateSubnet1Subnet8A550869": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.8.0/21",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/privateSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "devrockdevVpcprivateSubnet2DefaultRouteAEDFAD20": Object {
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "InstanceId": Object {
          "Ref": "devrockdevVpcpublicSubnet1NatInstance29B1A7CB",
        },
        "RouteTableId": Object {
          "Ref": "devrockdevVpcprivateSubnet2RouteTable783A0840",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "devrockdevVpcprivateSubnet2RouteTable783A0840": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/privateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcprivateSubnet2RouteTableAssociationAF7BDD79": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcprivateSubnet2RouteTable783A0840",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcprivateSubnet2Subnet0E13231B",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcprivateSubnet2Subnet0E13231B": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.16.0/21",
        "MapPublicIpOnLaunch": false,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "private",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Private",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/privateSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "devrockdevVpcpublicSubnet1DefaultRouteF5626F1E": Object {
      "DependsOn": Array [
        "devrockdevVpcVPCGW5AE47AFA",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "devrockdevVpcIGW15E80D98",
        },
        "RouteTableId": Object {
          "Ref": "devrockdevVpcpublicSubnet1RouteTableF25ABD77",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "devrockdevVpcpublicSubnet1NatInstance29B1A7CB": Object {
      "DependsOn": Array [
        "devrockdevVpcNatRole0844BD2B",
      ],
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "IamInstanceProfile": Object {
          "Ref": "devrockdevVpcpublicSubnet1NatInstanceInstanceProfileAC8F5EBA",
        },
        "ImageId": "ami-1234",
        "InstanceType": "t3.small",
        "SecurityGroupIds": Array [
          Object {
            "Fn::GetAtt": Array [
              "devrockdevVpcNatSecurityGroupC7C190C8",
              "GroupId",
            ],
          },
        ],
        "SourceDestCheck": false,
        "SubnetId": Object {
          "Ref": "devrockdevVpcpublicSubnet1SubnetD5F9935D",
        },
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/publicSubnet1/NatInstance",
          },
        ],
        "UserData": Object {
          "Fn::Base64": "#!/bin/bash",
        },
      },
      "Type": "AWS::EC2::Instance",
    },
    "devrockdevVpcpublicSubnet1NatInstanceInstanceProfileAC8F5EBA": Object {
      "Properties": Object {
        "Roles": Array [
          Object {
            "Ref": "devrockdevVpcNatRole0844BD2B",
          },
        ],
      },
      "Type": "AWS::IAM::InstanceProfile",
    },
    "devrockdevVpcpublicSubnet1RouteTableAssociation178BEC24": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcpublicSubnet1RouteTableF25ABD77",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcpublicSubnet1SubnetD5F9935D",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcpublicSubnet1RouteTableF25ABD77": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/publicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcpublicSubnet1SubnetD5F9935D": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1a",
        "CidrBlock": "10.0.0.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/publicSubnet1",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
    "devrockdevVpcpublicSubnet2DefaultRoute176DBDB4": Object {
      "DependsOn": Array [
        "devrockdevVpcVPCGW5AE47AFA",
      ],
      "Properties": Object {
        "DestinationCidrBlock": "0.0.0.0/0",
        "GatewayId": Object {
          "Ref": "devrockdevVpcIGW15E80D98",
        },
        "RouteTableId": Object {
          "Ref": "devrockdevVpcpublicSubnet2RouteTable594F8401",
        },
      },
      "Type": "AWS::EC2::Route",
    },
    "devrockdevVpcpublicSubnet2RouteTable594F8401": Object {
      "Properties": Object {
        "Tags": Array [
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/publicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::RouteTable",
    },
    "devrockdevVpcpublicSubnet2RouteTableAssociationF9A536CC": Object {
      "Properties": Object {
        "RouteTableId": Object {
          "Ref": "devrockdevVpcpublicSubnet2RouteTable594F8401",
        },
        "SubnetId": Object {
          "Ref": "devrockdevVpcpublicSubnet2Subnet7AA112DD",
        },
      },
      "Type": "AWS::EC2::SubnetRouteTableAssociation",
    },
    "devrockdevVpcpublicSubnet2Subnet7AA112DD": Object {
      "Properties": Object {
        "AvailabilityZone": "dummy1b",
        "CidrBlock": "10.0.1.0/24",
        "MapPublicIpOnLaunch": true,
        "Tags": Array [
          Object {
            "Key": "aws-cdk:subnet-name",
            "Value": "public",
          },
          Object {
            "Key": "aws-cdk:subnet-type",
            "Value": "Public",
          },
          Object {
            "Key": "Name",
            "Value": "testStack/devrock-dev-Vpc/publicSubnet2",
          },
        ],
        "VpcId": Object {
          "Ref": "devrockdevVpcE0FCCF81",
        },
      },
      "Type": "AWS::EC2::Subnet",
    },
  },
}
`;
